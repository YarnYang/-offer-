# -*- coding:utf-8 -*-
'''
@题目描述
输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。

@解题思路
首先，考虑这样一个知识点：12的二进制为1100，bin(12-1)=1011，也就是，一个二进制数-1，最右边的1会变成0，1右边的0会变成1。将这两个数相与，就会消去右边的第一个1.

继续看12的例子，bin(12) = 1100, bin(11) = 1011. 12&11 = 1000。消去了12的第一个1.
继续，1000-1 = 0111，1000&0111=0000.
最终得到全为0的数，循环结束。而循环进行了几次就有几个1.

这里要特别注意的是python的二进制表示比较特别。
在python中，正数的补码表示与c++等相同，但是负数的表示有较大的差异。
bin(-3) = -0b11，需要求出-3的补码
求解方法就是-3 & 0xffffffff 就得到了-3 32位的补码表示。具体相与的方法为，先去掉前面的符号，再取反，再加1，在进行与的操作。其实就是一个原码求补码的过程。
'''
class Solution:
    def NumberOf1(self, n):
        # write code here
        count = 0
        if n < 0:
            n = n & 0xffffffff #求出不带符号的补码
        while n != 0:
            count += 1
            n = n-1 & (n)
        return count