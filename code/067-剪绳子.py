# -*- coding:utf-8 -*-
'''
@题目描述
给你一根长度为n的绳子，请把绳子剪成整数长的m段（m、n都是整数，n>1并且m>1），每段绳子的长度记为k[0],k[1],...,k[m]。请问k[0]xk[1]x...xk[m]可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

@解题思路
 * 先举几个例子，可以看出规律来。
 * 4 ： 2*2
 * 5 ： 2*3
 * 6 ： 3*3
 * 7 ： 2*2*3 或者4*3
 * 8 ： 2*3*3
 * 9 ： 3*3*3
 * 10：2*2*3*3 或者4*3*3
 * 11：2*3*3*3
 * 12：3*3*3*3
 * 13：2*2*3*3*3 或者4*3*3*3

 分为三种情况

 - 被3除余数为0的，就全部剪成以3为单位的绳子
 - 被3除余数为1的，拿出一个3，与余数1组成两个2，其余都是3
 - 被3除余数为2的，能被3整除的部分都剪成以3为单位，余数部分剪成2为单位
'''
class Solution:
    def cutRope(self, number):
        # write code here
        if number == 1 or number == 2:
            return 1
        if number == 3:
            return 2
        if number % 3 == 0:
            return 3 ** (number / 3)
        if number % 3 == 1:
            return 3 ** int(number / 3 - 1) * 4
        if number % 3 == 2:
            return 3 ** int(number / 3) * 2