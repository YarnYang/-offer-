# -*- coding:utf-8 -*-
'''
@题目描述
一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。

@解题思路
同样找到规律求解。
f(1) = 1
f(2) = f(2-1) + f(2-2) = f(1) + f(0)       //f(2-2) 表示2阶一次跳2阶的次数。
f(3) = f(3-1) + f(3-2) + f(3-3) = f(2) + f(1) + f(0)
...
f(n) = f(n-1) + f(n-2) + ... + f(1) + f(0)

f(3-1)的意思为最后一步为一个台阶，那么就有f(2)种跳法，f(3-2)的意思可以理解为最后一步为两个台阶，那么就有f(1)种跳法。

进一步推导，
f(2) = f(1) + f(0)
f(3) = f(2) + f(1) + f(0) = 2*f(2)
f(n-1) = f(n-2) + f(n-3) + ... + f(1) + f(0)
f(n) = f(n-1) + f(n-2) + f(n-3) + ... + f(1) + f(0) = 2 * f(n-1)

所以f(n) = 2^(n-1)
'''
class Solution:
    def jumpFloorII(self, number):
        # write code here
        if number == 0 or number == 1:
            return number
        return 2**(number-1)